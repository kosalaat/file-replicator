// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: replicator.proto

package replicator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfirmationCode int32

const (
	ConfirmationCode_OK                ConfirmationCode = 0
	ConfirmationCode_UPDATE_ERROR      ConfirmationCode = 1
	ConfirmationCode_FILE_NOT_FOUND    ConfirmationCode = 2
	ConfirmationCode_FILE_NOT_READABLE ConfirmationCode = 3
	ConfirmationCode_FILE_NOT_WRITABLE ConfirmationCode = 4
	ConfirmationCode_OFFSET_ERROR      ConfirmationCode = 5
	ConfirmationCode_BLOCK_SIZE_ERROR  ConfirmationCode = 6
	ConfirmationCode_CHANGES_NOT_FOUND ConfirmationCode = 7
	ConfirmationCode_CHANGES_REPORTED  ConfirmationCode = 8
	ConfirmationCode_UNHANDLED_ERROR   ConfirmationCode = 254
	ConfirmationCode_DUPLICATE         ConfirmationCode = 255
)

// Enum value maps for ConfirmationCode.
var (
	ConfirmationCode_name = map[int32]string{
		0:   "OK",
		1:   "UPDATE_ERROR",
		2:   "FILE_NOT_FOUND",
		3:   "FILE_NOT_READABLE",
		4:   "FILE_NOT_WRITABLE",
		5:   "OFFSET_ERROR",
		6:   "BLOCK_SIZE_ERROR",
		7:   "CHANGES_NOT_FOUND",
		8:   "CHANGES_REPORTED",
		254: "UNHANDLED_ERROR",
		255: "DUPLICATE",
	}
	ConfirmationCode_value = map[string]int32{
		"OK":                0,
		"UPDATE_ERROR":      1,
		"FILE_NOT_FOUND":    2,
		"FILE_NOT_READABLE": 3,
		"FILE_NOT_WRITABLE": 4,
		"OFFSET_ERROR":      5,
		"BLOCK_SIZE_ERROR":  6,
		"CHANGES_NOT_FOUND": 7,
		"CHANGES_REPORTED":  8,
		"UNHANDLED_ERROR":   254,
		"DUPLICATE":         255,
	}
)

func (x ConfirmationCode) Enum() *ConfirmationCode {
	p := new(ConfirmationCode)
	*p = x
	return p
}

func (x ConfirmationCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfirmationCode) Descriptor() protoreflect.EnumDescriptor {
	return file_replicator_proto_enumTypes[0].Descriptor()
}

func (ConfirmationCode) Type() protoreflect.EnumType {
	return &file_replicator_proto_enumTypes[0]
}

func (x ConfirmationCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfirmationCode.Descriptor instead.
func (ConfirmationCode) EnumDescriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{0}
}

type DataPayload struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Hash             []byte                 `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Length           uint64                 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	DataChunk        []byte                 `protobuf:"bytes,3,opt,name=DataChunk,proto3" json:"DataChunk,omitempty"`
	ChunkID          uint64                 `protobuf:"varint,4,opt,name=ChunkID,proto3" json:"ChunkID,omitempty"`
	ParentChunkID    uint64                 `protobuf:"varint,5,opt,name=ParentChunkID,proto3" json:"ParentChunkID,omitempty"`
	RelativeFilePath string                 `protobuf:"bytes,6,opt,name=RelativeFilePath,proto3" json:"RelativeFilePath,omitempty"`
	BlockSize        uint64                 `protobuf:"varint,7,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	FileMode         uint32                 `protobuf:"varint,8,opt,name=FileMode,proto3" json:"FileMode,omitempty"`
	FileSize         uint64                 `protobuf:"varint,9,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	UID              uint32                 `protobuf:"varint,10,opt,name=UID,proto3" json:"UID,omitempty"`
	GID              uint32                 `protobuf:"varint,11,opt,name=GID,proto3" json:"GID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DataPayload) Reset() {
	*x = DataPayload{}
	mi := &file_replicator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPayload) ProtoMessage() {}

func (x *DataPayload) ProtoReflect() protoreflect.Message {
	mi := &file_replicator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPayload.ProtoReflect.Descriptor instead.
func (*DataPayload) Descriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{0}
}

func (x *DataPayload) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *DataPayload) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DataPayload) GetDataChunk() []byte {
	if x != nil {
		return x.DataChunk
	}
	return nil
}

func (x *DataPayload) GetChunkID() uint64 {
	if x != nil {
		return x.ChunkID
	}
	return 0
}

func (x *DataPayload) GetParentChunkID() uint64 {
	if x != nil {
		return x.ParentChunkID
	}
	return 0
}

func (x *DataPayload) GetRelativeFilePath() string {
	if x != nil {
		return x.RelativeFilePath
	}
	return ""
}

func (x *DataPayload) GetBlockSize() uint64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DataPayload) GetFileMode() uint32 {
	if x != nil {
		return x.FileMode
	}
	return 0
}

func (x *DataPayload) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *DataPayload) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *DataPayload) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

type FileOps struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RelativeFilePath    string                 `protobuf:"bytes,1,opt,name=RelativeFilePath,proto3" json:"RelativeFilePath,omitempty"`
	NewRelativeFilePath string                 `protobuf:"bytes,2,opt,name=NewRelativeFilePath,proto3" json:"NewRelativeFilePath,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FileOps) Reset() {
	*x = FileOps{}
	mi := &file_replicator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileOps) ProtoMessage() {}

func (x *FileOps) ProtoReflect() protoreflect.Message {
	mi := &file_replicator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileOps.ProtoReflect.Descriptor instead.
func (*FileOps) Descriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{1}
}

func (x *FileOps) GetRelativeFilePath() string {
	if x != nil {
		return x.RelativeFilePath
	}
	return ""
}

func (x *FileOps) GetNewRelativeFilePath() string {
	if x != nil {
		return x.NewRelativeFilePath
	}
	return ""
}

type ChunkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          uint64                 `protobuf:"varint,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ChunkID       uint64                 `protobuf:"varint,2,opt,name=ChunkID,proto3" json:"ChunkID,omitempty"`
	BlockSize     uint64                 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkInfo) Reset() {
	*x = ChunkInfo{}
	mi := &file_replicator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkInfo) ProtoMessage() {}

func (x *ChunkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_replicator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkInfo.ProtoReflect.Descriptor instead.
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{2}
}

func (x *ChunkInfo) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ChunkInfo) GetChunkID() uint64 {
	if x != nil {
		return x.ChunkID
	}
	return 0
}

func (x *ChunkInfo) GetBlockSize() uint64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

type DataSignature struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Chunk            []*ChunkInfo           `protobuf:"bytes,1,rep,name=Chunk,proto3" json:"Chunk,omitempty"`
	RelativeFilePath string                 `protobuf:"bytes,2,opt,name=RelativeFilePath,proto3" json:"RelativeFilePath,omitempty"`
	BlockSize        uint64                 `protobuf:"varint,3,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	HashAlgorithm    string                 `protobuf:"bytes,4,opt,name=HashAlgorithm,proto3" json:"HashAlgorithm,omitempty"`
	FileSize         uint64                 `protobuf:"varint,5,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	FileMode         uint32                 `protobuf:"varint,6,opt,name=FileMode,proto3" json:"FileMode,omitempty"`
	UID              uint32                 `protobuf:"varint,7,opt,name=UID,proto3" json:"UID,omitempty"`
	GID              uint32                 `protobuf:"varint,8,opt,name=GID,proto3" json:"GID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DataSignature) Reset() {
	*x = DataSignature{}
	mi := &file_replicator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSignature) ProtoMessage() {}

func (x *DataSignature) ProtoReflect() protoreflect.Message {
	mi := &file_replicator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSignature.ProtoReflect.Descriptor instead.
func (*DataSignature) Descriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{3}
}

func (x *DataSignature) GetChunk() []*ChunkInfo {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *DataSignature) GetRelativeFilePath() string {
	if x != nil {
		return x.RelativeFilePath
	}
	return ""
}

func (x *DataSignature) GetBlockSize() uint64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DataSignature) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

func (x *DataSignature) GetFileSize() uint64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *DataSignature) GetFileMode() uint32 {
	if x != nil {
		return x.FileMode
	}
	return 0
}

func (x *DataSignature) GetUID() uint32 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *DataSignature) GetGID() uint32 {
	if x != nil {
		return x.GID
	}
	return 0
}

type Confirmation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ConfirmationCode       `protobuf:"varint,1,opt,name=Code,proto3,enum=proto.ConfirmationCode" json:"Code,omitempty"`
	Chunk         []*ChunkInfo           `protobuf:"bytes,2,rep,name=Chunk,proto3" json:"Chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Confirmation) Reset() {
	*x = Confirmation{}
	mi := &file_replicator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Confirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confirmation) ProtoMessage() {}

func (x *Confirmation) ProtoReflect() protoreflect.Message {
	mi := &file_replicator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confirmation.ProtoReflect.Descriptor instead.
func (*Confirmation) Descriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{4}
}

func (x *Confirmation) GetCode() ConfirmationCode {
	if x != nil {
		return x.Code
	}
	return ConfirmationCode_OK
}

func (x *Confirmation) GetChunk() []*ChunkInfo {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type PingPong struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           string                 `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingPong) Reset() {
	*x = PingPong{}
	mi := &file_replicator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingPong) ProtoMessage() {}

func (x *PingPong) ProtoReflect() protoreflect.Message {
	mi := &file_replicator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingPong.ProtoReflect.Descriptor instead.
func (*PingPong) Descriptor() ([]byte, []int) {
	return file_replicator_proto_rawDescGZIP(), []int{5}
}

func (x *PingPong) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

var File_replicator_proto protoreflect.FileDescriptor

const file_replicator_proto_rawDesc = "" +
	"\n" +
	"\x10replicator.proto\x12\x05proto\"\xbd\x02\n" +
	"\vDataPayload\x12\x12\n" +
	"\x04Hash\x18\x01 \x01(\fR\x04Hash\x12\x16\n" +
	"\x06length\x18\x02 \x01(\x04R\x06length\x12\x1c\n" +
	"\tDataChunk\x18\x03 \x01(\fR\tDataChunk\x12\x18\n" +
	"\aChunkID\x18\x04 \x01(\x04R\aChunkID\x12$\n" +
	"\rParentChunkID\x18\x05 \x01(\x04R\rParentChunkID\x12*\n" +
	"\x10RelativeFilePath\x18\x06 \x01(\tR\x10RelativeFilePath\x12\x1c\n" +
	"\tBlockSize\x18\a \x01(\x04R\tBlockSize\x12\x1a\n" +
	"\bFileMode\x18\b \x01(\rR\bFileMode\x12\x1a\n" +
	"\bFileSize\x18\t \x01(\x04R\bFileSize\x12\x10\n" +
	"\x03UID\x18\n" +
	" \x01(\rR\x03UID\x12\x10\n" +
	"\x03GID\x18\v \x01(\rR\x03GID\"g\n" +
	"\aFileOps\x12*\n" +
	"\x10RelativeFilePath\x18\x01 \x01(\tR\x10RelativeFilePath\x120\n" +
	"\x13NewRelativeFilePath\x18\x02 \x01(\tR\x13NewRelativeFilePath\"W\n" +
	"\tChunkInfo\x12\x12\n" +
	"\x04Hash\x18\x01 \x01(\x04R\x04Hash\x12\x18\n" +
	"\aChunkID\x18\x02 \x01(\x04R\aChunkID\x12\x1c\n" +
	"\tBlockSize\x18\x03 \x01(\x04R\tBlockSize\"\x83\x02\n" +
	"\rDataSignature\x12&\n" +
	"\x05Chunk\x18\x01 \x03(\v2\x10.proto.ChunkInfoR\x05Chunk\x12*\n" +
	"\x10RelativeFilePath\x18\x02 \x01(\tR\x10RelativeFilePath\x12\x1c\n" +
	"\tBlockSize\x18\x03 \x01(\x04R\tBlockSize\x12$\n" +
	"\rHashAlgorithm\x18\x04 \x01(\tR\rHashAlgorithm\x12\x1a\n" +
	"\bFileSize\x18\x05 \x01(\x04R\bFileSize\x12\x1a\n" +
	"\bFileMode\x18\x06 \x01(\rR\bFileMode\x12\x10\n" +
	"\x03UID\x18\a \x01(\rR\x03UID\x12\x10\n" +
	"\x03GID\x18\b \x01(\rR\x03GID\"c\n" +
	"\fConfirmation\x12+\n" +
	"\x04Code\x18\x01 \x01(\x0e2\x17.proto.ConfirmationCodeR\x04Code\x12&\n" +
	"\x05Chunk\x18\x02 \x03(\v2\x10.proto.ChunkInfoR\x05Chunk\"\x1c\n" +
	"\bPingPong\x12\x10\n" +
	"\x03val\x18\x01 \x01(\tR\x03val*\xe9\x01\n" +
	"\x10ConfirmationCode\x12\x06\n" +
	"\x02OK\x10\x00\x12\x10\n" +
	"\fUPDATE_ERROR\x10\x01\x12\x12\n" +
	"\x0eFILE_NOT_FOUND\x10\x02\x12\x15\n" +
	"\x11FILE_NOT_READABLE\x10\x03\x12\x15\n" +
	"\x11FILE_NOT_WRITABLE\x10\x04\x12\x10\n" +
	"\fOFFSET_ERROR\x10\x05\x12\x14\n" +
	"\x10BLOCK_SIZE_ERROR\x10\x06\x12\x15\n" +
	"\x11CHANGES_NOT_FOUND\x10\a\x12\x14\n" +
	"\x10CHANGES_REPORTED\x10\b\x12\x14\n" +
	"\x0fUNHANDLED_ERROR\x10\xfe\x01\x12\x0e\n" +
	"\tDUPLICATE\x10\xff\x012\x8c\x02\n" +
	"\x0eFileReplicator\x124\n" +
	"\tReplicate\x12\x12.proto.DataPayload\x1a\x13.proto.Confirmation\x12<\n" +
	"\x0fCheckDuplicates\x12\x14.proto.DataSignature\x1a\x13.proto.Confirmation\x12-\n" +
	"\x06Rename\x12\x0e.proto.FileOps\x1a\x13.proto.Confirmation\x12-\n" +
	"\x06Delete\x12\x0e.proto.FileOps\x1a\x13.proto.Confirmation\x12(\n" +
	"\x04Ping\x12\x0f.proto.PingPong\x1a\x0f.proto.PingPongB\x0fZ\r./;replicatorb\x06proto3"

var (
	file_replicator_proto_rawDescOnce sync.Once
	file_replicator_proto_rawDescData []byte
)

func file_replicator_proto_rawDescGZIP() []byte {
	file_replicator_proto_rawDescOnce.Do(func() {
		file_replicator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_replicator_proto_rawDesc), len(file_replicator_proto_rawDesc)))
	})
	return file_replicator_proto_rawDescData
}

var file_replicator_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_replicator_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_replicator_proto_goTypes = []any{
	(ConfirmationCode)(0), // 0: proto.ConfirmationCode
	(*DataPayload)(nil),   // 1: proto.DataPayload
	(*FileOps)(nil),       // 2: proto.FileOps
	(*ChunkInfo)(nil),     // 3: proto.ChunkInfo
	(*DataSignature)(nil), // 4: proto.DataSignature
	(*Confirmation)(nil),  // 5: proto.Confirmation
	(*PingPong)(nil),      // 6: proto.PingPong
}
var file_replicator_proto_depIdxs = []int32{
	3, // 0: proto.DataSignature.Chunk:type_name -> proto.ChunkInfo
	0, // 1: proto.Confirmation.Code:type_name -> proto.ConfirmationCode
	3, // 2: proto.Confirmation.Chunk:type_name -> proto.ChunkInfo
	1, // 3: proto.FileReplicator.Replicate:input_type -> proto.DataPayload
	4, // 4: proto.FileReplicator.CheckDuplicates:input_type -> proto.DataSignature
	2, // 5: proto.FileReplicator.Rename:input_type -> proto.FileOps
	2, // 6: proto.FileReplicator.Delete:input_type -> proto.FileOps
	6, // 7: proto.FileReplicator.Ping:input_type -> proto.PingPong
	5, // 8: proto.FileReplicator.Replicate:output_type -> proto.Confirmation
	5, // 9: proto.FileReplicator.CheckDuplicates:output_type -> proto.Confirmation
	5, // 10: proto.FileReplicator.Rename:output_type -> proto.Confirmation
	5, // 11: proto.FileReplicator.Delete:output_type -> proto.Confirmation
	6, // 12: proto.FileReplicator.Ping:output_type -> proto.PingPong
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_replicator_proto_init() }
func file_replicator_proto_init() {
	if File_replicator_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_replicator_proto_rawDesc), len(file_replicator_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_replicator_proto_goTypes,
		DependencyIndexes: file_replicator_proto_depIdxs,
		EnumInfos:         file_replicator_proto_enumTypes,
		MessageInfos:      file_replicator_proto_msgTypes,
	}.Build()
	File_replicator_proto = out.File
	file_replicator_proto_goTypes = nil
	file_replicator_proto_depIdxs = nil
}
