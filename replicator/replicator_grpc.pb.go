// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: replicator.proto

package replicator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileReplicator_Replicate_FullMethodName       = "/proto.FileReplicator/Replicate"
	FileReplicator_CheckDuplicates_FullMethodName = "/proto.FileReplicator/CheckDuplicates"
	FileReplicator_Rename_FullMethodName          = "/proto.FileReplicator/Rename"
	FileReplicator_Delete_FullMethodName          = "/proto.FileReplicator/Delete"
	FileReplicator_Ping_FullMethodName            = "/proto.FileReplicator/Ping"
)

// FileReplicatorClient is the client API for FileReplicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileReplicatorClient interface {
	Replicate(ctx context.Context, in *DataPayload, opts ...grpc.CallOption) (*Confirmation, error)
	CheckDuplicates(ctx context.Context, in *DataSignature, opts ...grpc.CallOption) (*Confirmation, error)
	Rename(ctx context.Context, in *FileOps, opts ...grpc.CallOption) (*Confirmation, error)
	Delete(ctx context.Context, in *FileOps, opts ...grpc.CallOption) (*Confirmation, error)
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
}

type fileReplicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewFileReplicatorClient(cc grpc.ClientConnInterface) FileReplicatorClient {
	return &fileReplicatorClient{cc}
}

func (c *fileReplicatorClient) Replicate(ctx context.Context, in *DataPayload, opts ...grpc.CallOption) (*Confirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, FileReplicator_Replicate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicatorClient) CheckDuplicates(ctx context.Context, in *DataSignature, opts ...grpc.CallOption) (*Confirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, FileReplicator_CheckDuplicates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicatorClient) Rename(ctx context.Context, in *FileOps, opts ...grpc.CallOption) (*Confirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, FileReplicator_Rename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicatorClient) Delete(ctx context.Context, in *FileOps, opts ...grpc.CallOption) (*Confirmation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, FileReplicator_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicatorClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingPong)
	err := c.cc.Invoke(ctx, FileReplicator_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileReplicatorServer is the server API for FileReplicator service.
// All implementations must embed UnimplementedFileReplicatorServer
// for forward compatibility.
type FileReplicatorServer interface {
	Replicate(context.Context, *DataPayload) (*Confirmation, error)
	CheckDuplicates(context.Context, *DataSignature) (*Confirmation, error)
	Rename(context.Context, *FileOps) (*Confirmation, error)
	Delete(context.Context, *FileOps) (*Confirmation, error)
	Ping(context.Context, *PingPong) (*PingPong, error)
	mustEmbedUnimplementedFileReplicatorServer()
}

// UnimplementedFileReplicatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileReplicatorServer struct{}

func (UnimplementedFileReplicatorServer) Replicate(context.Context, *DataPayload) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedFileReplicatorServer) CheckDuplicates(context.Context, *DataSignature) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDuplicates not implemented")
}
func (UnimplementedFileReplicatorServer) Rename(context.Context, *FileOps) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFileReplicatorServer) Delete(context.Context, *FileOps) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileReplicatorServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileReplicatorServer) mustEmbedUnimplementedFileReplicatorServer() {}
func (UnimplementedFileReplicatorServer) testEmbeddedByValue()                        {}

// UnsafeFileReplicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileReplicatorServer will
// result in compilation errors.
type UnsafeFileReplicatorServer interface {
	mustEmbedUnimplementedFileReplicatorServer()
}

func RegisterFileReplicatorServer(s grpc.ServiceRegistrar, srv FileReplicatorServer) {
	// If the following call pancis, it indicates UnimplementedFileReplicatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileReplicator_ServiceDesc, srv)
}

func _FileReplicator_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicatorServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicator_Replicate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicatorServer).Replicate(ctx, req.(*DataPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicator_CheckDuplicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicatorServer).CheckDuplicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicator_CheckDuplicates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicatorServer).CheckDuplicates(ctx, req.(*DataSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicator_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicatorServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicator_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicatorServer).Rename(ctx, req.(*FileOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicator_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileOps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicatorServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicator_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicatorServer).Delete(ctx, req.(*FileOps))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicatorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicator_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicatorServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

// FileReplicator_ServiceDesc is the grpc.ServiceDesc for FileReplicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileReplicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileReplicator",
	HandlerType: (*FileReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Replicate",
			Handler:    _FileReplicator_Replicate_Handler,
		},
		{
			MethodName: "CheckDuplicates",
			Handler:    _FileReplicator_CheckDuplicates_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FileReplicator_Rename_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileReplicator_Delete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _FileReplicator_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicator.proto",
}
